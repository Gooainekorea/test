교수님이 올린 파일 분석
```python
!pip install tensorflow gradio numpy pillow
```

- TensorFlow, Gradio, NumPy, Pillow(PIL) 라이브러리를 설치.
- 이 명령은 Jupyter Notebook 또는 Google Colab 환경에서 실행.
- **`!`**는 셸 명령을 실행하기 위한 접두사.

```python
!pip install tensorflow==2.12.0
```

- TensorFlow의 특정 버전(2.12.0)을 설치
- 최신버전 호환안됨

```python
# 필요 라이브러리 임포트

import gradio as gr
import tensorflow as tf
import numpy as np
from PIL import Ima
```

| **gradio** | 웹 인터페이스 생성 라이브러리. |
| --- | --- |
| **tensorflow** | 딥러닝 모델을 로드하고 예측하는 데 사용. |
| **numpy** | 수학 연산 및 배열 처리를 위한 라이브러리. |
| **PIL.Image** | 이미지를 처리하기 위한 라이브러리. |

```python
# 모델 로딩
try:
    model = tf.keras.models.load_model("rps_model.h5", safe_mode=False)
except Exception as e:
    print(f"모델 로딩 중 오류 발생: {e}")

```

- **tf.keras.models.load_model**: 사전에 저장된 Keras 모델(**rps_model.h5**)을 로드.
- **safe_mode=False**: 모델 로딩 시 안전 모드를 비활성화(호환성 관련 경고를 무시).
- 모델 로딩 중 오류가 발생하시 에러 메시지를 출력.

```python
# 예측 함수 수정 (디버깅 추가)
def predict_rps(image): 
#이미지 입력을 받아 가위, 바위, 보를 예측하는 함수 **predict_rps**를 정의.
    image = image.resize((224, 224))  # 모델 입력 크기에 맞게 224x224로 조정
    image = np.array(image) / 255.0  # 이미지를 NumPy 배열로 변환, 픽샐값을 255에서 255.0으로 정규화
    image = np.expand_dims(image, axis=0)  # 배치 차원 추가: 러닝 모델은 배치(batch) 단위로 데이터를 처리하므로, 입력 이미지에 배치 차원을 추가하여 (1, 224, 224, 3) 형태로 만들어준다.

    predictions = model.predict(image)  # 예측 수행: 이미지를 예측하고 결과를 반환(반환값 = 각 클래스(가위, 바위, 보)에 대한 확률 배열)
    predicted_class = np.argmax(predictions)  # 가장 높은 확률의 클래스의 인덱스 선택
    confidence = predictions[0][predicted_class]  # 해당 클래스의 확률값 저장

    # 예측 결과 디버깅
    print(f"예측된 클래스: {CLASSES[predicted_class]} (확률: {confidence:.2%})")
    # 디버깅 목적으로 예측된 클래스와 확률을 출력
    #※ CLASSES정의 안됨 - 이거 labels 파일인거 같은데
    print(f"전체 예측 확률: {predictions}")

    return f"{CLASSES[predicted_class]} (확률: {confidence:.2%})"
    #최종적으로 예측된 클래스 이름과 확률을 문자열 형태로 반환
```

```python
# Gradio 인터페이스 설정
interface = gr.Interface(
    fn=predict_rps,  # 예측 함수
    inputs=gr.Image(type="pil"),  # 이미지 입력 (PIL 형식)
    outputs="text",  # 텍스트 출력 (예측 결과)
    title="가위바위보 인식기",
    description="이미지를 업로드하면 가위, 바위, 보 중 하나를 예측합니다.",
)
```

- **fn**: 호출할 함수(**predict_rps**).
- **inputs**: 사용자 입력 타입(PIL 이미지).
- **outputs**: 출력 타입(텍스트).
- **title**: 웹 앱 제목.
- **description**: 웹 앱 설명.

```python
# 실행
if __name__ == "__main__":
    interface.launch()
```

**__name__ == "__main__ :** Python 스크립트를 직접 실행할 경우, Gradio 인터페이스를 실행하여 웹 앱을 시작.
